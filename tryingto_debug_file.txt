from player_divercite import PlayerDivercite
from seahorse.game.action import Action
from seahorse.game.game_state import GameState
from game_state_divercite import GameStateDivercite
from seahorse.utils.custom_exceptions import MethodNotImplementedError
import random
import math

class MyPlayer(PlayerDivercite):
    """
    Player class for Divercite game that makes random moves.

    Attributes:
        piece_type (str): piece type of the player
    """

    def __init__(self, piece_type: str, name: str = "MyPlayer"):
        """
        Initialize the PlayerDivercite instance.

        Args:
            piece_type (str): Type of the player's game piece
            name (str, optional): Name of the player (default is "bob")
            time_limit (float, optional): the time limit in (s)
        """
        super().__init__(piece_type, name)
        
        # self.isFirstPlayer = isFistPlayer
        self.isFirstMove = True
        self.counter = 0

    def compute_action(self, current_state: GameState, remaining_time: int = 1e9, **kwargs) -> Action:
        """
        Use the minimax algorithm to choose the best action based on the heuristic evaluation of game states.

        Args:
            current_state (GameState): The current game state.

        Returns:
            Action: The best action as determined by minimax.
        """

        #TODO
        # possible_actions = current_state.get_possible_light_actions()
        # # print('possible action', list(possible_actions))
        # return random.choice(list(possible_actions))

        possible_actions = current_state.generate_possible_heavy_actions()
        possible_actions_light = current_state.get_possible_light_actions()
        possible_actions_light = list(possible_actions_light)

        best_action = next(possible_actions)

        best_score = best_action.get_next_game_state().scores[self.get_id()]

        opponent_id = 0
        for players in current_state.players:
            if players.get_id() != self.get_id():
                opponent_id = players.get_id()
        # niveau 1 nous 
        for i in range(len(list(possible_actions)   )):
            # action = possible_actions[i]
            action = next(possible_actions)
            if self.counter <= 3:
                print('action', possible_actions_light[i])
                self.counter += 1
            state = action.get_next_game_state()
            score = state.scores[self.get_id()] - state.scores[opponent_id]
            if score > best_score:
                best_action = action
                best_score = score


        # print('next player ', ) #current_state.get_next_player().name
        # for player in current_state.players:
        #    if player.id

        # niveau 2 ennemi
        # possible_actions = best_action.get_current_game_state()
        # for action in possible_actions:
        #     state = action.get_next_game_state()
        #     score = state.scores[self.get_id()]
        #     if score > best_score:
        #         best_action = action

        # # niveau 3 nous 
        # possible_actions = best_action.get_current_game_state()
        # for action in possible_actions:
        #     state = action.get_next_game_state()
        #     score = state.scores[self.get_id()]
        #     if score > best_score:
        #         best_action = action
        
        return best_action

    def minMax():
        MethodNotImplementedError()


# possible_actions = current_state.get_possible_light_actions()
# possible_actions = list(possible_actions)
# for action in possible_actions:
#     print('action', action.data)
